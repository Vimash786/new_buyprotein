<?php

namespace Database\Seeders;

use App\Models\Payout;
use App\Models\PayoutTransaction;
use App\Models\Sellers;
use Carbon\Carbon;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class PayoutSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $sellers = Sellers::where('status', 'approved')->get();
        
        if ($sellers->isEmpty()) {
            $this->command->warn('No approved sellers found. Please run SellersSeeder first.');
            return;
        }
        
        $this->command->info('Creating sample payouts...');
        
        foreach ($sellers as $seller) {
            // Calculate earnings for the seller
            $earnings = $seller->calculateEarnings(
                Carbon::now()->subDays(15),
                Carbon::now()
            );
            
            // Only create payout if there are sales
            if ($earnings['total_sales'] > 0) {
                $payout = Payout::create([
                    'seller_id' => $seller->id,
                    'seller_name' => $seller->company_name,
                    'total_orders' => $earnings['total_orders'],
                    'total_sales' => $earnings['total_sales'],
                    'commission_amount' => $earnings['commission_amount'],
                    'payout_amount' => $earnings['payout_amount'],
                    'due_date' => Carbon::now()->addDays(rand(1, 10)),
                    'payout_date' => Carbon::now()->addDays(15),
                    'payment_status' => $this->getRandomStatus(),
                    'period_start' => Carbon::now()->subDays(15),
                    'period_end' => Carbon::now(),
                    'notes' => 'Sample payout generated by seeder',
                ]);
                
                // Create transaction if payout is paid
                if ($payout->payment_status === 'paid') {
                    PayoutTransaction::create([
                        'payout_id' => $payout->id,
                        'payment_method' => $this->getRandomPaymentMethod(),
                        'transaction_date' => Carbon::now()->subDays(rand(1, 5)),
                        'amount' => $payout->payout_amount,
                        'notes' => 'Sample transaction',
                        'reference_number' => 'TXN' . strtoupper(substr(md5(uniqid()), 0, 8)),
                        'status' => 'completed',
                    ]);
                }
                
                $this->command->line("Created payout for {$seller->company_name}: â‚¹" . number_format((float)$payout->payout_amount, 2));
            }
        }
        
        // Create some older payouts for history
        $this->createHistoricalPayouts($sellers);
        
        $this->command->info('Sample payouts created successfully!');
    }
    
    private function getRandomStatus(): string
    {
        return collect(['paid', 'unpaid', 'processing'])->random();
    }
    
    private function getRandomPaymentMethod(): string
    {
        return collect(['bank_transfer', 'upi', 'wallet'])->random();
    }
    
    private function createHistoricalPayouts($sellers)
    {
        // Create payouts for previous periods
        for ($i = 1; $i <= 3; $i++) {
            $periodStart = Carbon::now()->subDays(15 * ($i + 1));
            $periodEnd = Carbon::now()->subDays(15 * $i);
            
            foreach ($sellers->take(3) as $seller) { // Only for first 3 sellers
                $earnings = $seller->calculateEarnings($periodStart, $periodEnd);
                
                if ($earnings['total_sales'] > 0) {
                    $payout = Payout::create([
                        'seller_id' => $seller->id,
                        'seller_name' => $seller->company_name,
                        'total_orders' => $earnings['total_orders'],
                        'total_sales' => $earnings['total_sales'],
                        'commission_amount' => $earnings['commission_amount'],
                        'payout_amount' => $earnings['payout_amount'],
                        'due_date' => $periodEnd->copy()->addDays(5),
                        'payout_date' => $periodEnd->copy()->addDays(15),
                        'payment_status' => 'paid', // Historical payouts are paid
                        'period_start' => $periodStart,
                        'period_end' => $periodEnd,
                        'created_at' => $periodEnd,
                        'updated_at' => $periodEnd,
                    ]);
                    
                    // Create transaction
                    PayoutTransaction::create([
                        'payout_id' => $payout->id,
                        'payment_method' => $this->getRandomPaymentMethod(),
                        'transaction_date' => $periodEnd->copy()->addDays(rand(1, 3)),
                        'amount' => $payout->payout_amount,
                        'reference_number' => 'TXN' . strtoupper(substr(md5(uniqid()), 0, 8)),
                        'status' => 'completed',
                        'created_at' => $periodEnd,
                        'updated_at' => $periodEnd,
                    ]);
                }
            }
        }
    }
}
